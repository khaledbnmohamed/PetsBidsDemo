# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
RSpec.describe '/api/v1/users/user_id/pets/pet_id/bids' do
  path '/api/v1/users/{user_id}/pets/{pet_id}/bids' do
    post 'create bid' do
      consumes 'application/json'
      produces 'application/json'

      parameter name: :user_id, in: :path, type: :integer, required: true
      parameter name: :pet_id, in: :path, type: :integer, required: true

      parameter name: :bid, in: :body, schema: {
        type: :object,
        properties: {
          bid_price: { type: :string },
          user_id: { type: :string }

        }
      }
      response '200', 'create bid succefully' do
        let(:pet) { FactoryBot.create(:pet) }

        it 'create bid succsfully' do
          post "/api/v1/users/#{pet.user.id}/pets/#{pet.id}/bids",
               params: {
                 bid: {
                   bid_price: 20,
                   user_id: 1
                 }
               }
          expect(response).to have_http_status(:success)
          expect(response.parsed_body['user_id']).to eq(1)
          expect(response.parsed_body['pet_id']).to eq(pet.id)
          expect(response.parsed_body['bid_price']).to eq(20.0)
          expect(pet.bids.count).to eq 1
        end
      end
    end
  end

  path '/api/v1/users/{user_id}/pets/{pet_id}/bids' do
    get 'list all pet bids' do
      consumes 'application/json'
      produces 'application/json'

      parameter name: :user_id, in: :path, type: :integer, required: true
      parameter name: :pet_id, in: :path, type: :integer, required: true

      response '200', 'create bid succefully' do
        let(:pet) { FactoryBot.create(:pet) }

        it 'list all pet bids succeffully' do
          bids = FactoryBot.create_list(:bid, 15, pet: pet)

          get "/api/v1/users/#{pet.user.id}/pets/#{pet.id}/bids"
          expect(response).to have_http_status(:success)
          expect(response.parsed_body.count).to eq(15)
        end
      end
    end
  end
end
