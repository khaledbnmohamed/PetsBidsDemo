# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
RSpec.describe '/api/v1/applications/{application_token}/chats/{chat_number}/messages' do
  path '/api/v1/applications/{application_token}/chats/{chat_number}/messages' do
    post 'create message' do
      tags 'messages'
      consumes 'application/json'
      produces 'application/json'

      parameter name: :application_token, in: :path, type: :integer, required: true
      parameter name: :chat_number, in: :path, type: :integer, required: true
      parameter name: :message, in: :body, schema: {
        type: :object,
        properties: {
          text: { type: :string }
        }
      }
      response '200', 'create message succefully' do
        let(:chat) { FactoryBot.create(:chat) }

        it 'create message succsfully' do
          post "/api/v1/applications/#{chat.application.number}/chats/#{chat.number}/messages",
               params: { message: { text: 'message' } }
          expect(response).to have_http_status(:success)
          messages_count = chat.reload.messages_count
          expect(response.parsed_body['message']).to eq("Message with number: #{messages_count} will be created shorlty")
          expect(response.parsed_body['number']).to eq(messages_count)
        end
      end
    end

    path '/api/v1/applications/{application_token}/chats/{chat_number}/messages/{message_number}' do
      put 'update message' do
        tags 'messages'
        consumes 'application/json'
        produces 'application/json'

        parameter name: :application_token, in: :path, type: :integer, required: true
        parameter name: :chat_number, in: :path, type: :integer, required: true
        parameter name: :message_number, in: :path, type: :integer, required: true

        parameter name: :message, in: :body, schema: {
          type: :object,
          properties: {
            text: { type: :string }
          }
        }
        let(:message) { FactoryBot.create(:message) }
        response '200', 'message chat' do
          it 'updates message succsfully' do
            stub_request(:put, 'http://elastic_search:9200/text_index/').to_return(status: 200, body: '', headers: {})
            chat = message.chat
            put "/api/v1/applications/#{chat.application.number}/chats/#{chat.number}/messages/#{message.number}",
                params: { message: { text: 'edited app' } }
            expect(response).to have_http_status(:success)
            expect(response.parsed_body['name']).to eq('edited app')
            expect(response.parsed_body).to include('number')
            expect(response.parsed_body).to include('chats_count')
            expect(response.parsed_body).to include('number')
            expect(response.parsed_body).to_not include('id')
          end
        end
      end
    end

    path '/api/v1/applications/{application_token}/chats/{chat_number}/messages' do
      get 'search messages' do
        tags 'messages'
        consumes 'application/json'
        produces 'application/json'

        parameter name: :application_token, in: :path, type: :integer, required: true
        parameter name: :chat_number, in: :path, type: :integer, required: true
        parameter name: :keyword, in: :query, type: :string

        FactoryBot.create_list(:message, 30)
        let(:message) { FactoryBot.create(:message, text: 'رسالة عربية') }
        Message.__elasticsearch__.refresh_index!

        response '200', 'search message' do
          it 'find message succsfully' do
            get "/api/v1/applications/#{message.chat.application.number}/chats/#{c}/#{message.chat.number}/messages",
                params: { keyword: 'عربية' }
            expect(response).to have_http_status(:success)
          end
        end
      end
    end
  end
end
