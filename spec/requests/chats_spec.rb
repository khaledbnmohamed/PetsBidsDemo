# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/applications/{application_token}/chats', type: :request do
  path '/api/v1/applications/{application_token}/chats' do
    post 'create chat' do
      tags 'chats'
      consumes 'application/json'
      produces 'application/json'

      parameter name: :application_token, in: :path, type: :integer, required: true

      response '200', 'create chat' do
        it 'create chat succsfully' do
          app = FactoryBot.create(:application)
          post "/api/v1/applications/#{app.number}/chats"
          expect(response).to have_http_status(:success)
        end

        it 'when clashes happens it should retry' do
          app = FactoryBot.create(:application)
          app.chats_count += 1
          post "/api/v1/applications/#{app.number}/chats"
          app.save!
          expect(response).to have_http_status(:success)
        end
      end
    end
  end

  path '/api/v1/applications/{application_token}/chats/{chat_number}' do
    get 'get chat' do
      tags 'chats'
      consumes 'application/json'
      produces 'application/json'

      parameter name: :application_token, in: :path, type: :integer, required: true
      parameter name: :chat_number, in: :path, type: :integer, required: true

      let(:chat) { FactoryBot.create(:chat) }

      response '200', 'create chat' do
        it 'get chat succsfully' do
          app = chat.application
          get "/api/v1/applications/#{app.number}/chats/#{chat.number}"
          expect(response).to have_http_status(:success)
        end
      end
    end
  end

  path '/api/v1/applications/{application_token}/chats/{chat_number}' do
    delete 'delete chat' do
      tags 'chats'
      consumes 'application/json'
      produces 'application/json'

      parameter name: :application_token, in: :path, type: :integer, required: true
      parameter name: :chat_number, in: :path, type: :integer, required: true

      let(:chat) { FactoryBot.create(:chat) }

      response '200', 'delete chat succfully' do
        it 'delete chat succsfully  decrement coun' do
          app = chat.application
          delete "/api/v1/applications/#{app.number}/chats/#{chat.number}"
          expect(response).to have_http_status(:success)
          expect(app.reload.chats_count).to eq(0)
        end
      end
    end
  end
end
