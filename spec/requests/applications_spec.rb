# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/applications', type: :request do
  path '/api/v1/applications' do
    post 'create application' do
      tags 'applications'
      consumes 'application/json'
      produces 'application/json'

      parameter name: :application, in: :body, schema: {
        type: :object,
        properties: {
          name: { type: :string }
        }
      }

      response '200', 'create application' do
        it 'updates application succsfully' do
          post '/api/v1/applications', params: { application: { name: 'Khaled Awad Application' } }
          expect(response).to have_http_status(:success)
          expect(response.parsed_body['name']).to eq('Khaled Awad Application')
          expect(response.parsed_body).to include('number')
          expect(response.parsed_body).to include('chats_count')
          expect(response.parsed_body).to include('number')
          expect(response.parsed_body).to_not include('id')
        end
      end

      response '400', 'bad request' do
        it 'returns bad request if application name is empty' do
          post '/api/v1/applications', params: { application: { name: '' } }
          expect(response).to have_http_status(:bad_request)
          expect(response.parsed_body['message']['name']).to include("can't be blank")
        end
      end
    end
  end

  path '/api/v1/applications/{application_token}' do
    put 'update application' do
      tags 'applications'
      consumes 'application/json'
      produces 'application/json'

      parameter name: :application_token, in: :path, type: :integer, required: true
      parameter name: :application, in: :body, schema: {
        type: :object,
        properties: {
          name: { type: :string }
        }
      }

      let(:application) { FactoryBot.create(:application) }

      response '200', 'create application' do
        it 'creates application succsfully' do
          put "/api/v1/applications/#{application.number}", params: { application: { name: 'edited app' } }
          expect(response).to have_http_status(:success)
          expect(response.parsed_body['name']).to eq('edited app')
          expect(response.parsed_body).to include('number')
          expect(response.parsed_body).to include('chats_count')
          expect(response.parsed_body).to include('number')
          expect(response.parsed_body).to_not include('id')
        end
      end
    end
  end

  path '/api/v1/applications/{application_token}' do
    get 'get application' do
      tags 'applications'
      consumes 'application/json'
      produces 'application/json'

      parameter name: :application_token, in: :path, type: :integer, required: true

      let(:application) { FactoryBot.create(:application) }

      response '200', 'create application' do
        it 'get application succsfully' do
          get "/api/v1/applications/#{application.number}"
          expect(response).to have_http_status(:success)
          expect(response.parsed_body['name']).to eq(application.name)
          expect(response.parsed_body['number']).to eq(application.number)
          expect(response.parsed_body['chats_count']).to eq(application.chats_count)
          expect(response.parsed_body).to_not include('id')
        end
      end
    end
  end
end
